From bae1733372720b1344a29b6fc2dcf7c29294e357 Mon Sep 17 00:00:00 2001
From: Andrii Osipov <aosipov@anaconda.com>
Date: Mon, 2 Jun 2025 03:08:56 -0700
Subject: [PATCH] removed pool and unavailable checkpointers

---
 tests/conftest.py              | 196 ++++++++++++++++-----------------
 tests/conftest_checkpointer.py |  16 +--
 tests/conftest_store.py        |   2 +-
 3 files changed, 107 insertions(+), 107 deletions(-)

diff --git a/tests/conftest.py b/tests/conftest.py
index 8ca3a8d..ed66c1d 100644
--- a/tests/conftest.py
+++ b/tests/conftest.py
@@ -10,31 +10,31 @@ from pytest_mock import MockerFixture
 
 from langgraph.cache.base import BaseCache
 from langgraph.cache.memory import InMemoryCache
-from langgraph.cache.sqlite import SqliteCache
+#from langgraph.cache.sqlite import SqliteCache
 from langgraph.checkpoint.base import BaseCheckpointSaver
 from langgraph.store.base import BaseStore
 from tests.conftest_checkpointer import (
     _checkpointer_memory,
-    _checkpointer_postgres,
-    _checkpointer_postgres_aio,
-    _checkpointer_postgres_aio_pipe,
-    _checkpointer_postgres_aio_pool,
-    _checkpointer_postgres_aio_shallow,
-    _checkpointer_postgres_pipe,
-    _checkpointer_postgres_pool,
-    _checkpointer_postgres_shallow,
-    _checkpointer_sqlite,
-    _checkpointer_sqlite_aes,
-    _checkpointer_sqlite_aio,
+    #_checkpointer_postgres,
+    #_checkpointer_postgres_aio,
+    #_checkpointer_postgres_aio_pipe,
+    #_checkpointer_postgres_aio_pool,
+    #_checkpointer_postgres_aio_shallow,
+    #_checkpointer_postgres_pipe,
+    #_checkpointer_postgres_pool,
+    #_checkpointer_postgres_shallow,
+    #_checkpointer_sqlite,
+    #_checkpointer_sqlite_aes,
+    #_checkpointer_sqlite_aio,
 )
 from tests.conftest_store import (
     _store_memory,
-    _store_postgres,
-    _store_postgres_aio,
-    _store_postgres_aio_pipe,
-    _store_postgres_aio_pool,
-    _store_postgres_pipe,
-    _store_postgres_pool,
+    #_store_postgres,
+    #_store_postgres_aio,
+    #_store_postgres_aio_pipe,
+    #_store_postgres_aio_pool,
+    #_store_postgres_pipe,
+    #_store_postgres_pool,
 )
 
 pytest.register_assert_rewrite("tests.memory_assert")
@@ -118,21 +118,21 @@ async def awith_checkpointer(
     elif checkpointer_name == "memory":
         with _checkpointer_memory() as checkpointer:
             yield checkpointer
-    elif checkpointer_name == "sqlite_aio":
-        async with _checkpointer_sqlite_aio() as checkpointer:
-            yield checkpointer
-    elif checkpointer_name == "postgres_aio":
-        async with _checkpointer_postgres_aio() as checkpointer:
-            yield checkpointer
-    elif checkpointer_name == "postgres_aio_shallow":
-        async with _checkpointer_postgres_aio_shallow() as checkpointer:
-            yield checkpointer
-    elif checkpointer_name == "postgres_aio_pipe":
-        async with _checkpointer_postgres_aio_pipe() as checkpointer:
-            yield checkpointer
-    elif checkpointer_name == "postgres_aio_pool":
-        async with _checkpointer_postgres_aio_pool() as checkpointer:
-            yield checkpointer
+    #elif checkpointer_name == "sqlite_aio":
+    #    async with _checkpointer_sqlite_aio() as checkpointer:
+    #        yield checkpointer
+    #elif checkpointer_name == "postgres_aio":
+    #    async with _checkpointer_postgres_aio() as checkpointer:
+    #        yield checkpointer
+    #elif checkpointer_name == "postgres_aio_shallow":
+    #    async with _checkpointer_postgres_aio_shallow() as checkpointer:
+    #        yield checkpointer
+    #elif checkpointer_name == "postgres_aio_pipe":
+    #    async with _checkpointer_postgres_aio_pipe() as checkpointer:
+    #        yield checkpointer
+    #elif checkpointer_name == "postgres_aio_pool":
+    #    async with _checkpointer_postgres_aio_pool() as checkpointer:
+    #        yield checkpointer
     else:
         raise NotImplementedError(f"Unknown checkpointer: {checkpointer_name}")
 
@@ -161,15 +161,15 @@ def sync_store(request: pytest.FixtureRequest) -> Iterator[BaseStore]:
     elif store_name == "in_memory":
         with _store_memory() as store:
             yield store
-    elif store_name == "postgres":
-        with _store_postgres() as store:
-            yield store
-    elif store_name == "postgres_pipe":
-        with _store_postgres_pipe() as store:
-            yield store
-    elif store_name == "postgres_pool":
-        with _store_postgres_pool() as store:
-            yield store
+    #elif store_name == "postgres":
+    #    with _store_postgres() as store:
+    #        yield store
+    #elif store_name == "postgres_pipe":
+    #    with _store_postgres_pipe() as store:
+    #        yield store
+    #elif store_name == "postgres_pool":
+    #    with _store_postgres_pool() as store:
+    #        yield store
     else:
         raise NotImplementedError(f"Unknown store {store_name}")
 
@@ -185,15 +185,15 @@ async def async_store(request: pytest.FixtureRequest) -> AsyncIterator[BaseStore
     elif store_name == "in_memory":
         with _store_memory() as store:
             yield store
-    elif store_name == "postgres_aio":
-        async with _store_postgres_aio() as store:
-            yield store
-    elif store_name == "postgres_aio_pipe":
-        async with _store_postgres_aio_pipe() as store:
-            yield store
-    elif store_name == "postgres_aio_pool":
-        async with _store_postgres_aio_pool() as store:
-            yield store
+    #elif store_name == "postgres_aio":
+    #    async with _store_postgres_aio() as store:
+    #        yield store
+    #elif store_name == "postgres_aio_pipe":
+    #    async with _store_postgres_aio_pipe() as store:
+    #        yield store
+    #elif store_name == "postgres_aio_pool":
+    #    async with _store_postgres_aio_pool() as store:
+    #        yield store
     else:
         raise NotImplementedError(f"Unknown store {store_name}")
 
@@ -202,11 +202,11 @@ async def async_store(request: pytest.FixtureRequest) -> AsyncIterator[BaseStore
     scope="function",
     params=[
         "memory",
-        "sqlite",
-        "sqlite_aes",
-        "postgres",
-        "postgres_pipe",
-        "postgres_pool",
+        #"sqlite",
+        #"sqlite_aes",
+        #"postgres",
+        #"postgres_pipe",
+        #"postgres_pool",
     ],
 )
 def sync_checkpointer(
@@ -216,21 +216,21 @@ def sync_checkpointer(
     if checkpointer_name == "memory":
         with _checkpointer_memory() as checkpointer:
             yield checkpointer
-    elif checkpointer_name == "sqlite":
-        with _checkpointer_sqlite() as checkpointer:
-            yield checkpointer
-    elif checkpointer_name == "sqlite_aes":
-        with _checkpointer_sqlite_aes() as checkpointer:
-            yield checkpointer
-    elif checkpointer_name == "postgres":
-        with _checkpointer_postgres() as checkpointer:
-            yield checkpointer
-    elif checkpointer_name == "postgres_pipe":
-        with _checkpointer_postgres_pipe() as checkpointer:
-            yield checkpointer
-    elif checkpointer_name == "postgres_pool":
-        with _checkpointer_postgres_pool() as checkpointer:
-            yield checkpointer
+    #elif checkpointer_name == "sqlite":
+    #    with _checkpointer_sqlite() as checkpointer:
+    #        yield checkpointer
+    #elif checkpointer_name == "sqlite_aes":
+    #    with _checkpointer_sqlite_aes() as checkpointer:
+    #        yield checkpointer
+    #elif checkpointer_name == "postgres":
+    #    with _checkpointer_postgres() as checkpointer:
+    #        yield checkpointer
+    #elif checkpointer_name == "postgres_pipe":
+    #    with _checkpointer_postgres_pipe() as checkpointer:
+    #        yield checkpointer
+    #elif checkpointer_name == "postgres_pool":
+    #    with _checkpointer_postgres_pool() as checkpointer:
+    #        yield checkpointer
     else:
         raise NotImplementedError(f"Unknown checkpointer: {checkpointer_name}")
 
@@ -239,10 +239,10 @@ def sync_checkpointer(
     scope="function",
     params=[
         "memory",
-        "sqlite_aio",
-        "postgres_aio",
-        "postgres_aio_pipe",
-        "postgres_aio_pool",
+        #"sqlite_aio",
+        #"postgres_aio",
+        #"postgres_aio_pipe",
+        #"postgres_aio_pool",
     ],
 )
 async def async_checkpointer(
@@ -252,36 +252,36 @@ async def async_checkpointer(
     if checkpointer_name == "memory":
         with _checkpointer_memory() as checkpointer:
             yield checkpointer
-    elif checkpointer_name == "sqlite_aio":
-        async with _checkpointer_sqlite_aio() as checkpointer:
-            yield checkpointer
-    elif checkpointer_name == "postgres_aio":
-        async with _checkpointer_postgres_aio() as checkpointer:
-            yield checkpointer
-    elif checkpointer_name == "postgres_aio_pipe":
-        async with _checkpointer_postgres_aio_pipe() as checkpointer:
-            yield checkpointer
-    elif checkpointer_name == "postgres_aio_pool":
-        async with _checkpointer_postgres_aio_pool() as checkpointer:
-            yield checkpointer
+    #elif checkpointer_name == "sqlite_aio":
+    #    async with _checkpointer_sqlite_aio() as checkpointer:
+    #        yield checkpointer
+    #elif checkpointer_name == "postgres_aio":
+    #    async with _checkpointer_postgres_aio() as checkpointer:
+    #        yield checkpointer
+    #elif checkpointer_name == "postgres_aio_pipe":
+    #    async with _checkpointer_postgres_aio_pipe() as checkpointer:
+    #        yield checkpointer
+    #elif checkpointer_name == "postgres_aio_pool":
+    #    async with _checkpointer_postgres_aio_pool() as checkpointer:
+    #        yield checkpointer
     else:
         raise NotImplementedError(f"Unknown checkpointer: {checkpointer_name}")
 
 
 ALL_CHECKPOINTERS_SYNC = [
     "memory",
-    "sqlite",
-    "sqlite_aes",
-    "postgres",
-    "postgres_pipe",
-    "postgres_pool",
-    "postgres_shallow",
+    #"sqlite",
+    #"sqlite_aes",
+    #"postgres",
+    #"postgres_pipe",
+    #"postgres_pool",
+    #"postgres_shallow",
 ]
 ALL_CHECKPOINTERS_ASYNC = [
     "memory",
-    "sqlite_aio",
-    "postgres_aio",
-    "postgres_aio_pipe",
-    "postgres_aio_pool",
-    "postgres_aio_shallow",
+    #"sqlite_aio",
+    #"postgres_aio",
+    #"postgres_aio_pipe",
+    #"postgres_aio_pool",
+    #"postgres_aio_shallow",
 ]
diff --git a/tests/conftest_checkpointer.py b/tests/conftest_checkpointer.py
index e437735..fed35d8 100644
--- a/tests/conftest_checkpointer.py
+++ b/tests/conftest_checkpointer.py
@@ -4,16 +4,16 @@ from uuid import uuid4
 
 import pytest
 from psycopg import AsyncConnection, Connection
-from psycopg_pool import AsyncConnectionPool, ConnectionPool
+#from psycopg_pool import AsyncConnectionPool, ConnectionPool
 
-from langgraph.checkpoint.postgres import PostgresSaver, ShallowPostgresSaver
-from langgraph.checkpoint.postgres.aio import (
-    AsyncPostgresSaver,
-    AsyncShallowPostgresSaver,
-)
+#from langgraph.checkpoint.postgres import PostgresSaver, ShallowPostgresSaver
+#from langgraph.checkpoint.postgres.aio import (
+#    AsyncPostgresSaver,
+#    AsyncShallowPostgresSaver,
+#)
 from langgraph.checkpoint.serde.encrypted import EncryptedSerializer
-from langgraph.checkpoint.sqlite import SqliteSaver
-from langgraph.checkpoint.sqlite.aio import AsyncSqliteSaver
+#from langgraph.checkpoint.sqlite import SqliteSaver
+#from langgraph.checkpoint.sqlite.aio import AsyncSqliteSaver
 from tests.memory_assert import MemorySaverAssertImmutable
 
 DEFAULT_POSTGRES_URI = "postgres://postgres:postgres@localhost:5442/"
diff --git a/tests/conftest_store.py b/tests/conftest_store.py
index 9d047a8..30ee02c 100644
--- a/tests/conftest_store.py
+++ b/tests/conftest_store.py
@@ -6,7 +6,7 @@ import pytest
 from psycopg import AsyncConnection, Connection
 
 from langgraph.store.memory import InMemoryStore
-from langgraph.store.postgres import AsyncPostgresStore, PostgresStore
+#from langgraph.store.postgres import AsyncPostgresStore, PostgresStore
 
 DEFAULT_POSTGRES_URI = "postgres://postgres:postgres@localhost:5442/"
 
-- 
2.39.3 (Apple Git-146)

